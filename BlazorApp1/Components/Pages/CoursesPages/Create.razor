@page "/courses/create"

@using Microsoft.EntityFrameworkCore
@using BlazorApp1.Models
@using BlazorApp1.Data
@inject IDbContextFactory<BlazorApp1.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h4>Courses</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Courses" OnValidSubmit="AddCourses" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label> 
                <InputText id="name" @bind-Value="Courses.Name" class="form-control" /> 
                <ValidationMessage For="() => Courses.Name" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="startdate" class="form-label">StartDate:</label> 
                <InputDate id="startdate" @bind-Value="Courses.StartDate" class="form-control" /> 
                <ValidationMessage For="() => Courses.StartDate" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="enddate" class="form-label">EndDate:</label> 
                <InputDate id="enddate" @bind-Value="Courses.EndDate" class="form-control" /> 
                <ValidationMessage For="() => Courses.EndDate" class="text-danger" /> 
            </div>        

            <div class="mb-3">
                <label for="semesterid" class="form-label">Semester:</label>
                <InputSelect id="semesterid" @bind-Value="Courses.SemesterId" class="form-control">
                    @foreach (var semester in Semesters)
                    {
                        <option value="@semester.Id">@semester.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Courses.SemesterId" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="lectureid" class="form-label">Lecture:</label>
                <InputSelect id="lectureid" @bind-Value="Courses.LectureId" class="form-control">
                    @foreach (var lecture in Lectures)
                    {
                        <option value="@lecture.Id">@lecture.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Courses.LectureId" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="subjectid" class="form-label">Subject:</label>
                <InputSelect id="subjectid" @bind-Value="Courses.SubjectId" class="form-control">
                    @foreach (var subject in Subjects)
                    {
                        <option value="@subject.Id">@subject.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Courses.SubjectId" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/courses">Back to List</a>
</div>

@code {

    [SupplyParameterFromForm]
    public Courses Courses { get; set; } = new();

    public List<ApplicationUser> Lectures { get; set; } = new();
    public List<Semesters> Semesters { get; set; } = new();
    public List<Subjects> Subjects { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Lectures = await context.ApplicationUser.ToListAsync();
        Subjects = await context.Subjects.ToListAsync();
        Semesters = await context.Semesters.ToListAsync();
    }


    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddCourses()
    {
        using var context = DbFactory.CreateDbContext();
        context.Courses.Add(Courses);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/courses");
    }
}
